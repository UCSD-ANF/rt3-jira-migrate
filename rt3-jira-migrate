#!/opt/csw/bin/perl
#
use warnings;
use strict;

package main;

# Modify this to point to the Request Tracker installation location
use lib "/opt/rt3/lib";

use JellyWriter;
use RT3_Jira_Mapper;

# Import RT's API
use RT::Interface::CLI qw(CleanEnv loc);
use RT::Tickets;
use Data::Dumper;

use POSIX;

#
# Configuration
#

# output file format variables
#
# Because the Jelly parser is a huge memory hog, it can't handle all 1700+
# tickets at once. The following variables control the automatic splitting of
# output files.
my $outdir="/home/davis/src/IGPP/rt3-jira-migrate/data";
my $outfnprefix="rt3-jira-migrate-"; # output file prefix
my $outfnsuffix=".jelly"; # output file suffix
my $numtixperfile=1; # Maximum number of tickets per file


# The Jira custom field used to track the RT ticket number
my $rttktidfn="RT3 Ticket Number";

my $jellywriter; # JellyWriter object


sub processTicketCustomFields($){
  my $Ticket=shift;

  my $CustomFields = $Ticket->CustomFields;
  while ( my $CustomField = $CustomFields->Next ) {
    my $rtfn=$CustomField->Name;
    my $jirafn=mapCFNames($rtfn);

    my $CFVals=$Ticket->CustomFieldValues( $CustomField->Id);

    # skip field if there aren't any values to process
    next unless ($CFVals->Count > 0);

    my $cfval_ref=$CFVals->ItemsArrayRef;

    # Extract the content of the custom field values and put it into an array
    my @vals = map { $_->Content } @$cfval_ref;
    &mapCFProc($rtfn)->($jellywriter, $jirafn, \@vals);
  }
}

# Initilize RT
sub initRT {
  CleanEnv(); # Clean out all the nasties from the environment
  RT::LoadConfig(); # Load RT's config file
  RT::Init(); # Connect to the database. Set up logging

  return
}

sub getRTTicketDescription($){
  my $Ticket = shift;

  my $Transactions = $Ticket->Transactions;

  return unless $Transactions->Count > 0;

  my $Transaction = $Transactions->First;
  $Transactions->GotoItem(0); # reset transactions index

  return $Transaction->Content;
}

sub processTicketObj($) {
  my $ticket = shift;

  # Skip deleted tickets
  if ($ticket->Status eq 'deleted'){
    printf STDERR "NOTICE: skipping deleted ticket %s\n", $ticket->Id;
    return;
  }

  my $ownerUser = new RT::User($RT::SystemUser);
  $ownerUser->Load($ticket->Owner);
  my $jiraowner; # the Jira owner of the ticket
  if ($ownerUser->Name eq "Nobody") {
    # let jira auto-assign the owner based on queue policy
    $jiraowner="-1";
  }
  else {
    # use the mapUser function to find the jira user
    $jiraowner=mapUser($ownerUser);
  }

  # Get the ticket description
  my $ticketdesc=getRTTicketDescription($ticket);
  my $requestors = $ticket->Requestors->UserMembersObj; # Returns a group object

  # Determine a requestor to use
  # Due to merging or other operations, multiple requestors can be assigned to a ticket.
  # We'll only use one, based on the following priority
  # * The first privileged user (or non-prived RT user that is mapped to a Jira user)
  # * The first non-privileged user
  my $firstreqname = AnonUser();
  my $firstexternalemail;
  while ( my $requestor = $requestors->Next ) {
    # loop through to see if any of the requestors is a Jira user
    if (isAnon($requestor)){
      $firstexternalemail=$requestor->EmailAddress unless $firstexternalemail; # preserve the firstexternalmail
      $firstreqname=RT3_Jira_Mapper::AnonUser();
    } else {
      $firstreqname=mapUser($requestor);
      $firstexternalemail="";
      last;
    }
  }

  # If we have a firstexternalmail, add a blurb to the description about it
  # Otherwise, we'd just have a bunch of tickets assigned to $anonuser with no way to track it
  if ($firstexternalemail) {
    $ticketdesc="Requested by Non-Jira User: $firstexternalemail\n".$ticketdesc;
  }

  $ticketdesc=JellyWriter::cleanXML($ticketdesc);
  $ticketdesc=JellyWriter::escapeJellyReservedChars($ticketdesc);

  # Create Issue
  $jellywriter->jellyStartCreateIssue(
    mapQueueToProject($ticket->QueueObj->Name),
    $ticket->Subject,
    mapPriority($ticket->Priority),
    $firstreqname,
    $jiraowner,
    $ticketdesc,
    fmtDateSQL2Jelly($ticket->Created),
    fmtDateSQL2Jelly($ticket->LastUpdated),
  );

  # Insert RT3 Ticket Number Custom Field
  $jellywriter->jellyAddCustomFieldValue($rttktidfn, $ticket->Id);

  #my $CustomFields = $ticket->CustomFields;
  #while ( my $CustomField = $CustomFields->Next ) {
  #  my $Values = $ticket->CustomFieldValues( $CustomField->Id );
  #  my $count = $Values->Count;
  #  my $fn=mapCFNames($CustomField->Name);
  #  #printf STDERR "Processing CustomField %s (%d values)\n", $CustomField->Name, $count;
  #  while ( my $Value = $Values->Next ) {
  #    jellyAddCustomFieldValue($fn, $Value->Content);
  #  }
  #}
  processTicketCustomFields($ticket);

  # End Issue
  $jellywriter->jellyFinishCreateTicket();
}

# foreach comment: generate jelly script to add a comment to existing ticket
sub processTicketTransactions($) {
  my $Ticket=shift;     # input RT::Ticket object
  my $Transactions = $Ticket->Transactions; # Transactions from the current ticket
  my $type;             # transaction type
  my %transtypectr;     # Keep count of each transaction type we encounter per ticket

  # RT tickets can be in any state, open or closed. Jira jelly creates tickets in the "Open" state which is equivalent to the "new" state in RT.
  # The transaction record may or may not record the creation of the ticket, but we need to make sure that we don't try to do a re-open on a Jira "open" or "In Progress" ticket.
  # Additionally, the create transaction record doesn't track the initial state of the ticket, making it tough to get a full history
  # Jira Jelly won't let us set the creation date of a workflow transition either, so all that matters is to record the final state of the RT ticket.

  my $finalstatus=$Ticket->Status;
  my $reopenctr=0;      # track if the ticket has been reopened
  my $laststatususer;   # track who the last user to do a status change on a ticket is
  my $lastcloseduser;   # track who last closed the ticket
  while (my $Transaction = $Transactions->Next) {

    $type=$Transaction->Type;
    $transtypectr{$type}++;
    #printf STDERR "Transaction %d has type \"%s\"\n", $Transaction->Id, $type;

    if ( $type =~ /^(Comment|Correspond)$/i ) {
      # Process transaction as a comment
      Transaction2Comment($Transaction);
    }
    elsif ( ($type =~ /Status/) && ($Transaction->Field eq 'Status') ) {
      $laststatususer=mapUser($Transaction->CreatorObj);

      my $oldstatus=$Transaction->OldValue;
      my $newstatus=$Transaction->NewValue;

      # track the last user to close a ticket is
      if ($newstatus =~ /^(rejected|resolved|deleted)$/) {
        $lastcloseduser=mapUser($Transaction->CreatorObj);
      }

      # Track re-opens
      if ( ( $oldstatus =~ /^(rejected|resolved|deleted)$/) &&
        ($newstatus =~ /^(new|open|stalled)$/ ) 
      ) {
        $reopenctr++;
      }

      # Process transaction as a workflow transition
      # Transaction2WorkflowTransition($Transaction, $transtypectr{$type});
    }
    elsif ($type =~ /^(Create|CommentEmailRecord|EmailRecord|AddWatcher|DelWatcher|Give|Take|Steal|Set|AddLink|DeleteLink|CustomField|Told|AddReminder|ResolveReminder|Told)$/i ) {
      # transactions we know about that we can skip
      # we skip Create transactions since the comment associated with Create is the Jira Issue description
    }
    else {
      # Skip unknown transaction types
      printf STDERR "Skipping unknown RT transaction type %s in transaction %d\n", $type, $Transaction->Id;
    }
  }

  # Finally, set the status of the Jira issue based on it's current state and whether it's been reopened or not
  # if we're in an open state and reopenctr > 0
  #   generate a close and then a reopen
  # else just generate a transaction based on the final state
  # Since we don't know who to blame for each commit, we're not going to track whether or not the ticket is in proress or not, just open or closed.

  if ( $finalstatus =~ /^(new|stalled|open)$/ ){
    if ($reopenctr) {
      # TODO: We don't track whether previous close was a fixed or won't fix situation
      $jellywriter->jellyWkFlowCloseIssue("Fixed",$lastcloseduser);
      $jellywriter->jellyWkFlowReopenIssue($laststatususer);
    }
    # else - since jira issues created in jelly are already in an open state, we'll do nothing
  } elsif ( $finalstatus =~ /^(rejected|resolved|deleted)$/ ) {
    $jellywriter->jellyWkFlowCloseIssue(mapResolution($finalstatus),$laststatususer);
  }
  else {
    die(sprintf("Unknown final status %s encountered on Ticket %d",$finalstatus,$Ticket->Id));
  }
}


# process a transaction that results in a Jira comment
sub Transaction2Comment($) {
  my $Transaction=shift;

  return 1 unless $Transaction->ContentObj; # Bail out if this has no content

  my $creatorobj = $Transaction->CreatorObj;
  my $transuser = mapUser($creatorobj);
  my $transcontent = $Transaction->Content;
  my $transdate = fmtDateSQL2Jelly($Transaction->Created);

  # for some reason there are some Comments in our queue that have no actual 
  # text content, but there is a ContentObj associated with them.
  # Skip those transactions with the null string as content
  return 1 unless $transcontent;

  if (isAnon($creatorobj)){
    # extract original user info
    my $origuser=$creatorobj->Name;
    my $origemail=$creatorobj->EmailAddress;
    # pre-pend blurb to comment
    $transcontent="Comment from Non-Jira User: $origuser <$origemail>\n".$transcontent;
  }
  $jellywriter->jellyAddComment($transuser,$transdate,$transcontent); # Add the Jelly Command
  return 0;
}

#process a transaction that results in a Jira Workflow transition
sub Transaction2WorkflowTransition($) {
  my $Transaction = shift;
  my $oldstatus = $Transaction->OldValue;
  my $newstatus = $Transaction->NewValue;
  my $user = mapUser($Transaction->CreatorObj);

  if ( $oldstatus =~ /^(new|stalled)$/ ) {
    # Jira Issue should be in an "Open" state
    if ( $newstatus =~ /^(new|stalled)$/ ) {
      return 1;# do nothing
    }
    elsif ($newstatus eq 'open') {
      $jellywriter->jellyWkFlowStartProgress($user);
      return 1;
    }
    elsif ( $newstatus =~ /^(rejected|deleted|resolved)$/ ) {
      $jellywriter->jellyWkFlowCloseIssue(&mapResolution($newstatus), $user);
      return 1;
    }
  } 
  elsif ($oldstatus eq 'open') {
    # Jira Issue should be in an "In Progress" state
    if ( $newstatus =~ /^(new|stalled)$/ ){
      $jellywriter->jellyWkFlowStopProgress($user);
      return 1;
    }
    elsif ( $newstatus =~ /^(rejected|deleted|resolved)$/ ) {
      $jellywriter->jellyWkFlowCloseIssue(mapResolution($newstatus), $user);
      return 1;
    }
  }
  elsif ($oldstatus =~ /^(rejected|resolved|deleted)$/) {
    # Jira Issue should be in a closed state
    if ( $newstatus eq "new" ) {
      $jellywriter->jellyWkFlowReopenIssue($user);
      return 1;
    }
    elsif ( $newstatus eq "open" ) {
      $jellywriter->jellyWkFlowReopenIssue($user);
      $jellywriter->jellyWkFlowStartProgress($user);
      return 1;
    }
    elsif ( $oldstatus eq "rejected" && $newstatus eq "resolved" ){
      # do nothing - handle ticket #369 which should have stayed in "rejected" state
      return 1;
    }
  }


  # Unknown RT status
  printf STDERR "ERROR: Transaction %d -- Unhandled RT Status Transition %s -> %s", $Transaction->Id, $oldstatus, $newstatus;
  return 1;
}

# Format a Date in SQL format in a Jira Jelly-ready format
sub fmtDateSQL2Jelly ($) {
  my $sqldate=shift;    # input date in SQL date format
  my $date_obj;         # RT::Date parser
  my $result;           # output in Jelly format

  $date_obj = RT::Date->new( RT->SystemUser ); 
  $date_obj->Set(
    Format => 'sql',
    Value  => $sqldate,
  );
  $result = strftime("%Y-%m-%d %H:%M:%S.0", 
    @{ [ localtime( $date_obj->Unix ) ] } );

  return $result;
}

sub processTicket($) {
  my $ticket = shift;
  print STDERR "Processing RT Ticket #" . $ticket->Id . "\n";
  $jellywriter->setIssueKeyVarName("rt".$ticket->Id);

  &processTicketObj($ticket);

  &processTicketTransactions($ticket);
}

######### MAIN #########

# Initilize our connection to RT
initRT();

# print banner
# print STDERR loc('Hello!') . "\n";

# Get a list of all tickets in RT
# Since RT::Tickets inherits from DBIx::SearchBuilder, no results show up
# unless search conditions are specified.
my $tickets= new RT::Tickets($RT::SystemUser);
$tickets->LimitId( OPERATOR => '>', VALUE => '0');
# Comment previous line and uncomment the following two lines for test tix
#$tickets->LimitId(OPERATOR => '>', VALUE => '1300');
#$tickets->LimitId(OPERATOR => '<', VALUE => '1350');

my $numtix = $tickets->Count; #total number of tickets
my $numfiles = &POSIX::ceil($numtix/$numtixperfile);
my $curfileidx=1; # current file index

# Print how many tickets we have
print STDERR "\$tickets->Count is ".$numtix."\n";
my $padlen = length($numtix);

# Issues
while (my $ticket = $tickets->Next) {
  if (($tickets->_ItemsCounter-1)%$numtixperfile == 0){
    # close the existing file if any
    if ($jellywriter) {
      $jellywriter->finishJellyOutput();
    }

    # Start a new file
    # get ready to write Jelly
    my $filename = sprintf("%s/%s%0".$padlen."d_of_%d%s",
      $outdir,
      $outfnprefix,
      $curfileidx,
      $numfiles,
      $outfnsuffix
    );
    printf STDERR "Starting new file \"%s\"\n", $filename;
    $jellywriter=new JellyWriter( Filename=>$filename );
    $jellywriter->startJellyOutput($filename);
    $curfileidx++; #increment the current file counter
  }
  processTicket($ticket);
}

# finish up our XML document
$jellywriter->finishJellyOutput() if $jellywriter;

print STDERR "The following users should be created:\n\t";
print STDERR join "\n\t", JellyWriter::getJiraUsers();
print STDERR "\n";

print STDERR "The following users are treated as Anonymous\n\t";
print STDERR join "\n\t", RT3_Jira_Mapper::getRTAnonUsers;
print STDERR "\n";

print STDERR "The following Custom Fields should be created:\n\t";
print STDERR join "\n\t", JellyWriter::getJiraCustomFieldNames();
print STDERR "\n";

print STDERR "\n------------\n";
print STDERR "Unique values in the custom fields (for use with Multi Select Jira fields):";
foreach my $fn (JellyWriter::getJiraCustomFieldNames){
  next if ($fn =~ /^RT3/);

  print STDERR "Field $fn:";
  print STDERR join "\n\t", JellyWriter::getJiraCustomFieldValues($fn);

  print "\n";
}
